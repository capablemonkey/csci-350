(DEFUN ALL-FUNS (LIST)
  (COND
    ((NOT (LISTP LIST)) (PRINT "ARGUMENT ERROR: EXPECTED A LIST"))
    ((ENDP LIST) NIL)
    ((FIRST LIST) (CONS 'FUN (ALL-FUNS (REST LIST))))
    (T (CONS NIL (ALL-FUNS (REST LIST))))))

(PRINT "=== ALL-FUNS ===")
(PRINT (ALL-FUNS '(8 mom 3 pop 42 nil foo)))
(PRINT (ALL-FUNS '(8 (cake (7 nil (ice cream)) 0 (nil)) (((foo))))) )
(PRINT (ALL-FUNS 'BLAH))
(PRINT (ALL-FUNS '()))
(PRINT (ALL-FUNS (ALL-FUNS '(1 2 3 NIL))))

(DEFUN COUNTER (TARGET LIST)
  (IF (OR (NOT (LISTP LIST)) (NOT (ATOM TARGET)))
    (RETURN-FROM COUNTER (PRINT "ARGUMENT ERROR: EXPECTED AN ATOM AND A LIST")))

  (COND
    ((ENDP LIST) 0)
    ((EQUAL TARGET (FIRST LIST)) (+ 1 (COUNTER TARGET (REST LIST))))
    (T (+ 0 (COUNTER TARGET (REST LIST))))))

(PRINT "=== COUNTER ===")
(PRINT (COUNTER 3 '(1 2 3 3 3 4)))
(PRINT (COUNTER NIL '()))
(PRINT (COUNTER T '(1 2 3 () NIL (()))))
(PRINT (COUNTER '(NIL T) '(1 2 3 (()))))
(PRINT (COUNTER 'AAA 'AAA))

(DEFUN DOT-PRODUCT (A B)
  (IF (OR
      (NOT (AND (LISTP A) (LISTP B)))
      (NOT (AND (EVERY #'NUMBERP A) (EVERY #'NUMBERP B))))
    (RETURN-FROM DOT-PRODUCT (PRINT "ARGUMENT ERROR: EXPECTED A LIST OF NUMBERS AND A LIST OF NUMBERS")))

  (REDUCE #'+ (MAPCAR #'* A B)))

(PRINT "=== DOT-PRODUCT ===")
(PRINT (DOT-PRODUCT '(1 2) '(3 4)))
(PRINT (DOT-PRODUCT '(1 2 3) '(4 5 DOG)))
(PRINT (DOT-PRODUCT 'A '(3 4)))
(PRINT (DOT-PRODUCT '(1 (2) 3) '(4 5 6)))
(PRINT (DOT-PRODUCT (LIST (DOT-PRODUCT '(1 2) '(3 4))) '(5 6)))


(DEFUN CARTESIAN-PRODUCT (A B)
  (IF (NOT (AND (LISTP A) (LISTP B)))
    (RETURN-FROM CARTESIAN-PRODUCT (PRINT "ARGUMENT ERROR: EXPECTED A LIST AND A LIST")))

  (MAPCAN
    (LAMBDA (ITEM-FROM-A)
      (MAPCAR
        (LAMBDA (ITEM-FROM-B)
          (LIST ITEM-FROM-A ITEM-FROM-B))
        B))
    A))

(PRINT "=== CARTESIAN-PRODUCT ===")
(PRINT (CARTESIAN-PRODUCT '(A B C) '(1 2 3 4)))
(PRINT (CARTESIAN-PRODUCT (CARTESIAN-PRODUCT '(A B C) '(1 2 3 4)) '(1 2 3 4)))
(PRINT (CARTESIAN-PRODUCT '(T) '(A B NIL)))
(PRINT (CARTESIAN-PRODUCT '((2)) '((1 2 3))))
(PRINT (CARTESIAN-PRODUCT 4 4))

(PRINT "=== WATER-JUG-2 ===")
(load "lib/searchengine.lisp")
(load "lib/water-jug-2.lisp")

(PRINT (BREADTH-FIRST-SEARCH *water-jug-2*))